{
    "sourceFile": "build/bin/build-entry.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 12,
            "patches": [
                {
                    "date": 1643334113146,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1643334332173,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,18 +3,21 @@\n  *  1、自动导入组件库所有组件\n  *  2、定义全量注册组件库组件的 install 方法\n  *  3、导出版本、install、各个组件\n  */\n-var Components = require('../../components.json');\n-var fs = require('fs');\n-var render = require('json-templater/string');\n-var uppercamelcase = require('uppercamelcase');\n-var path = require('path');\n-var endOfLine = require('os').EOL;\n \n-var OUTPUT_PATH = path.join(__dirname, '../../src/index.js');\n-var IMPORT_TEMPLATE = 'import {{name}} from \\'../packages/{{package}}/index.js\\';';\n-var INSTALL_COMPONENT_TEMPLATE = '  {{name}}';\n+//  key 为包名、路径为值\n+var Components = require('../../components.json')\n+var fs = require('fs')\n+// 模版库\n+var render = require('json-templater/string')\n+var uppercamelcase = require('uppercamelcase')\n+var path = require('path')\n+var endOfLine = require('os').EOL\n+\n+var OUTPUT_PATH = path.join(__dirname, '../../src/index.js')\n+var IMPORT_TEMPLATE = \"import {{name}} from '../packages/{{package}}/index.js';\"\n+var INSTALL_COMPONENT_TEMPLATE = '  {{name}}'\n var MAIN_TEMPLATE = `/* Automatically generated by './build/bin/build-entry.js' */\n \n {{include}}\n import locale from 'element-ui/src/locale';\n@@ -64,42 +67,45 @@\n   CollapseTransition,\n   Loading,\n {{list}}\n };\n-`;\n+`\n \n-delete Components.font;\n+delete Components.font\n \n-var ComponentNames = Object.keys(Components);\n+var ComponentNames = Object.keys(Components)\n \n-var includeComponentTemplate = [];\n-var installTemplate = [];\n-var listTemplate = [];\n+var includeComponentTemplate = []\n+var installTemplate = []\n+var listTemplate = []\n \n ComponentNames.forEach(name => {\n-  var componentName = uppercamelcase(name);\n+    var componentName = uppercamelcase(name)\n \n-  includeComponentTemplate.push(render(IMPORT_TEMPLATE, {\n-    name: componentName,\n-    package: name\n-  }));\n+    includeComponentTemplate.push(\n+        render(IMPORT_TEMPLATE, {\n+            name: componentName,\n+            package: name\n+        })\n+    )\n \n-  if (['Loading', 'MessageBox', 'Notification', 'Message', 'InfiniteScroll'].indexOf(componentName) === -1) {\n-    installTemplate.push(render(INSTALL_COMPONENT_TEMPLATE, {\n-      name: componentName,\n-      component: name\n-    }));\n-  }\n+    if (['Loading', 'MessageBox', 'Notification', 'Message', 'InfiniteScroll'].indexOf(componentName) === -1) {\n+        installTemplate.push(\n+            render(INSTALL_COMPONENT_TEMPLATE, {\n+                name: componentName,\n+                component: name\n+            })\n+        )\n+    }\n \n-  if (componentName !== 'Loading') listTemplate.push(`  ${componentName}`);\n-});\n+    if (componentName !== 'Loading') listTemplate.push(`  ${componentName}`)\n+})\n \n var template = render(MAIN_TEMPLATE, {\n-  include: includeComponentTemplate.join(endOfLine),\n-  install: installTemplate.join(',' + endOfLine),\n-  version: process.env.VERSION || require('../../package.json').version,\n-  list: listTemplate.join(',' + endOfLine)\n-});\n+    include: includeComponentTemplate.join(endOfLine),\n+    install: installTemplate.join(',' + endOfLine),\n+    version: process.env.VERSION || require('../../package.json').version,\n+    list: listTemplate.join(',' + endOfLine)\n+})\n \n-fs.writeFileSync(OUTPUT_PATH, template);\n-console.log('[build entry] DONE:', OUTPUT_PATH);\n-\n+fs.writeFileSync(OUTPUT_PATH, template)\n+console.log('[build entry] DONE:', OUTPUT_PATH)\n"
                },
                {
                    "date": 1643334688064,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n \n //  key 为包名、路径为值\n var Components = require('../../components.json')\n var fs = require('fs')\n-// 模版库\n+// https://www.npmjs.com/package/json-templater\n var render = require('json-templater/string')\n var uppercamelcase = require('uppercamelcase')\n var path = require('path')\n var endOfLine = require('os').EOL\n"
                },
                {
                    "date": 1643334871638,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,17 +7,27 @@\n \n //  key 为包名、路径为值\n var Components = require('../../components.json')\n var fs = require('fs')\n-// https://www.npmjs.com/package/json-templater\n+\n+// 用来渲染下面的字符串模板 https://www.npmjs.com/package/json-templater\n var render = require('json-templater/string')\n+\n+// 负责将 comp-name 形式的字符串转换为 CompName\n var uppercamelcase = require('uppercamelcase')\n var path = require('path')\n var endOfLine = require('os').EOL\n \n+// 输出路径 /src/index.js\n var OUTPUT_PATH = path.join(__dirname, '../../src/index.js')\n+\n+// 导入模版，import CompName from '../packages/comp-name/index.js'\n var IMPORT_TEMPLATE = \"import {{name}} from '../packages/{{package}}/index.js';\"\n+\n+// ' CompName'\n var INSTALL_COMPONENT_TEMPLATE = '  {{name}}'\n+\n+// /src/index.js 的模版\n var MAIN_TEMPLATE = `/* Automatically generated by './build/bin/build-entry.js' */\n \n {{include}}\n import locale from 'element-ui/src/locale';\n"
                },
                {
                    "date": 1643334891582,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,9 +25,9 @@\n \n // ' CompName'\n var INSTALL_COMPONENT_TEMPLATE = '  {{name}}'\n \n-// /src/index.js 的模版\n+// 生成/src/index.js 的模版\n var MAIN_TEMPLATE = `/* Automatically generated by './build/bin/build-entry.js' */\n \n {{include}}\n import locale from 'element-ui/src/locale';\n"
                },
                {
                    "date": 1643335696804,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,9 +25,9 @@\n \n // ' CompName'\n var INSTALL_COMPONENT_TEMPLATE = '  {{name}}'\n \n-// 生成/src/index.js 的模版\n+// 生成/src/index.js文件对应的模版\n var MAIN_TEMPLATE = `/* Automatically generated by './build/bin/build-entry.js' */\n \n {{include}}\n import locale from 'element-ui/src/locale';\n@@ -81,24 +81,31 @@\n `\n \n delete Components.font\n \n+// 得到所有的包名，[comp-name1, comp-name2]\n var ComponentNames = Object.keys(Components)\n \n+// 存放所有的 import 语句\n var includeComponentTemplate = []\n+// 组件名合集\n var installTemplate = []\n+// 组件名合集\n var listTemplate = []\n \n+// 遍历所有的包名\n ComponentNames.forEach(name => {\n+    // 将脊柱命名法的包名转换成大驼峰命名，就是组件名，比如 form-item => FormItem\n     var componentName = uppercamelcase(name)\n \n+    // 替换导入语句中的模版变量，生成导入语句，import FromItem from '../packages/form-item/index.js'\n     includeComponentTemplate.push(\n         render(IMPORT_TEMPLATE, {\n             name: componentName,\n             package: name\n         })\n     )\n-\n+    // 这些组件从 components 数组中剔除，不需要全局注册，采用挂载到原型链的方式，在模版字符串的 install 方法中有写\n     if (['Loading', 'MessageBox', 'Notification', 'Message', 'InfiniteScroll'].indexOf(componentName) === -1) {\n         installTemplate.push(\n             render(INSTALL_COMPONENT_TEMPLATE, {\n                 name: componentName,\n"
                },
                {
                    "date": 1643335719131,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -103,8 +103,9 @@\n             name: componentName,\n             package: name\n         })\n     )\n+\n     // 这些组件从 components 数组中剔除，不需要全局注册，采用挂载到原型链的方式，在模版字符串的 install 方法中有写\n     if (['Loading', 'MessageBox', 'Notification', 'Message', 'InfiniteScroll'].indexOf(componentName) === -1) {\n         installTemplate.push(\n             render(INSTALL_COMPONENT_TEMPLATE, {\n"
                },
                {
                    "date": 1643335792921,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,9 +25,9 @@\n \n // ' CompName'\n var INSTALL_COMPONENT_TEMPLATE = '  {{name}}'\n \n-// 生成/src/index.js文件对应的模版\n+// 生成/src/index.js文件对应的模版字符串\n var MAIN_TEMPLATE = `/* Automatically generated by './build/bin/build-entry.js' */\n \n {{include}}\n import locale from 'element-ui/src/locale';\n@@ -113,9 +113,9 @@\n                 component: name\n             })\n         )\n     }\n-\n+    // 将所有的组件放到 listTemplates，最后导出\n     if (componentName !== 'Loading') listTemplate.push(`  ${componentName}`)\n })\n \n var template = render(MAIN_TEMPLATE, {\n"
                },
                {
                    "date": 1643335824501,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -117,13 +117,15 @@\n     // 将所有的组件放到 listTemplates，最后导出\n     if (componentName !== 'Loading') listTemplate.push(`  ${componentName}`)\n })\n \n+// 替换模版中的四个变量\n var template = render(MAIN_TEMPLATE, {\n     include: includeComponentTemplate.join(endOfLine),\n     install: installTemplate.join(',' + endOfLine),\n     version: process.env.VERSION || require('../../package.json').version,\n     list: listTemplate.join(',' + endOfLine)\n })\n \n+// 将就绪的模版写入 /src/index.js\n fs.writeFileSync(OUTPUT_PATH, template)\n console.log('[build entry] DONE:', OUTPUT_PATH)\n"
                },
                {
                    "date": 1643335840513,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -125,7 +125,7 @@\n     version: process.env.VERSION || require('../../package.json').version,\n     list: listTemplate.join(',' + endOfLine)\n })\n \n-// 将就绪的模版写入 /src/index.js\n+// 将就绪的模版写入到输出路径 /src/index.js\n fs.writeFileSync(OUTPUT_PATH, template)\n console.log('[build entry] DONE:', OUTPUT_PATH)\n"
                },
                {
                    "date": 1643335933146,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,8 +14,9 @@\n \n // 负责将 comp-name 形式的字符串转换为 CompName\n var uppercamelcase = require('uppercamelcase')\n var path = require('path')\n+// 特定于操作系统的行尾标记。\\n(Unix Mac Linux)  \\r\\n(Windows)\n var endOfLine = require('os').EOL\n \n // 输出路径 /src/index.js\n var OUTPUT_PATH = path.join(__dirname, '../../src/index.js')\n"
                },
                {
                    "date": 1643336931269,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,8 +14,9 @@\n \n // 负责将 comp-name 形式的字符串转换为 CompName\n var uppercamelcase = require('uppercamelcase')\n var path = require('path')\n+\n // 特定于操作系统的行尾标记。\\n(Unix Mac Linux)  \\r\\n(Windows)\n var endOfLine = require('os').EOL\n \n // 输出路径 /src/index.js\n"
                },
                {
                    "date": 1643342221484,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n /**\n  * 生成 /src/index.js\n  *  1、自动导入组件库所有组件\n  *  2、定义全量注册组件库组件的 install 方法\n- *  3、导出版本、install、各个组件\n+ *  3、导出版本、install各个组件\n  */\n \n //  key 为包名、路径为值\n var Components = require('../../components.json')\n"
                }
            ],
            "date": 1643334113146,
            "name": "Commit-0",
            "content": "/**\n * 生成 /src/index.js\n *  1、自动导入组件库所有组件\n *  2、定义全量注册组件库组件的 install 方法\n *  3、导出版本、install、各个组件\n */\nvar Components = require('../../components.json');\nvar fs = require('fs');\nvar render = require('json-templater/string');\nvar uppercamelcase = require('uppercamelcase');\nvar path = require('path');\nvar endOfLine = require('os').EOL;\n\nvar OUTPUT_PATH = path.join(__dirname, '../../src/index.js');\nvar IMPORT_TEMPLATE = 'import {{name}} from \\'../packages/{{package}}/index.js\\';';\nvar INSTALL_COMPONENT_TEMPLATE = '  {{name}}';\nvar MAIN_TEMPLATE = `/* Automatically generated by './build/bin/build-entry.js' */\n\n{{include}}\nimport locale from 'element-ui/src/locale';\nimport CollapseTransition from 'element-ui/src/transitions/collapse-transition';\n\nconst components = [\n{{install}},\n  CollapseTransition\n];\n\nconst install = function(Vue, opts = {}) {\n  locale.use(opts.locale);\n  locale.i18n(opts.i18n);\n\n  components.forEach(component => {\n    Vue.component(component.name, component);\n  });\n\n  Vue.use(InfiniteScroll);\n  Vue.use(Loading.directive);\n\n  Vue.prototype.$ELEMENT = {\n    size: opts.size || '',\n    zIndex: opts.zIndex || 2000\n  };\n\n  Vue.prototype.$loading = Loading.service;\n  Vue.prototype.$msgbox = MessageBox;\n  Vue.prototype.$alert = MessageBox.alert;\n  Vue.prototype.$confirm = MessageBox.confirm;\n  Vue.prototype.$prompt = MessageBox.prompt;\n  Vue.prototype.$notify = Notification;\n  Vue.prototype.$message = Message;\n\n};\n\n/* istanbul ignore if */\nif (typeof window !== 'undefined' && window.Vue) {\n  install(window.Vue);\n}\n\nexport default {\n  version: '{{version}}',\n  locale: locale.use,\n  i18n: locale.i18n,\n  install,\n  CollapseTransition,\n  Loading,\n{{list}}\n};\n`;\n\ndelete Components.font;\n\nvar ComponentNames = Object.keys(Components);\n\nvar includeComponentTemplate = [];\nvar installTemplate = [];\nvar listTemplate = [];\n\nComponentNames.forEach(name => {\n  var componentName = uppercamelcase(name);\n\n  includeComponentTemplate.push(render(IMPORT_TEMPLATE, {\n    name: componentName,\n    package: name\n  }));\n\n  if (['Loading', 'MessageBox', 'Notification', 'Message', 'InfiniteScroll'].indexOf(componentName) === -1) {\n    installTemplate.push(render(INSTALL_COMPONENT_TEMPLATE, {\n      name: componentName,\n      component: name\n    }));\n  }\n\n  if (componentName !== 'Loading') listTemplate.push(`  ${componentName}`);\n});\n\nvar template = render(MAIN_TEMPLATE, {\n  include: includeComponentTemplate.join(endOfLine),\n  install: installTemplate.join(',' + endOfLine),\n  version: process.env.VERSION || require('../../package.json').version,\n  list: listTemplate.join(',' + endOfLine)\n});\n\nfs.writeFileSync(OUTPUT_PATH, template);\nconsole.log('[build entry] DONE:', OUTPUT_PATH);\n\n"
        }
    ]
}