{
    "sourceFile": "build/bin/gen-cssfile.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 4,
            "patches": [
                {
                    "date": 1643342778479,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1643342798284,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,13 +1,23 @@\n+/*\n+ * @Date: 2022-01-27 17:12:59\n+ * @LastEditors: zhaozc\n+ * @LastEditTime: 2022-01-28 12:06:18\n+ * @FilePath: \\ruipeng-ui\\build\\bin\\gen-cssfile.js\n+ */\n /**\n  * 自动在 /packages/theme-chalk/src/index.scss|css 中引入各个组件包的样式\n  * 在全量注册组件库时需要用到该样式文件，即 import 'packages/theme-chalk/src/index.scss\n  */\n var fs = require('fs')\n var path = require('path')\n var Components = require('../../components.json')\n var themes = ['theme-chalk']\n+\n+// 得到所有的包名\n Components = Object.keys(Components)\n+\n+// 所有组件包的基础路径，/packages\n var basepath = path.resolve(__dirname, '../../packages/')\n \n function fileExists(filePath) {\n     try {\n"
                },
                {
                    "date": 1643342913995,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,53 @@\n+/*\n+ * @Date: 2022-01-27 17:12:59\n+ * @LastEditors: zhaozc\n+ * @LastEditTime: 2022-01-28 12:08:33\n+ * @FilePath: \\ruipeng-ui\\build\\bin\\gen-cssfile.js\n+ */\n+/**\n+ * 自动在 /packages/theme-chalk/src/index.scss|css 中引入各个组件包的样式\n+ * 在全量注册组件库时需要用到该样式文件，即 import 'packages/theme-chalk/src/index.scss\n+ */\n+var fs = require('fs')\n+var path = require('path')\n+var Components = require('../../components.json')\n+var themes = ['theme-chalk']\n+\n+// 得到所有的包名\n+Components = Object.keys(Components)\n+\n+// 所有组件包的基础路径，/packages\n+var basepath = path.resolve(__dirname, '../../packages/')\n+\n+// 判断指定文件是否存在\n+function fileExists(filePath) {\n+    try {\n+        return fs.statSync(filePath).isFile()\n+    } catch (err) {\n+        return false\n+    }\n+}\n+\n+// 遍历所有组件包，生成引入所有组件包样式的 import 语句，然后自动生成 packages/theme-chalk/src/index.scss|css 文件\n+themes.forEach(theme => {\n+    // 是否是 scss，element-ui 默认使用 scss 编写样式\n+    var isSCSS = theme !== 'theme-default'\n+    // 导入基础样式文件 @import \"./base.scss|css\";\\n\n+    var indexContent = isSCSS ? '@import \"./base.scss\";\\n' : '@import \"./base.css\";\\n'\n+    // 遍历所有组件包，并生成 @import \"./comp-package.scss|css\";\\n\n+    Components.forEach(function (key) {\n+        // 跳过这三个组件包\n+        if (['icon', 'option', 'option-group'].indexOf(key) > -1) return\n+        // comp-package.scss|css\n+        var fileName = key + (isSCSS ? '.scss' : '.css')\n+        // 导入语句，@import \"./comp-package.scss|css\";\\n\n+        indexContent += '@import \"./' + fileName + '\";\\n'\n+        // 如果该组件包的样式文件不存在，比如 /packages/form-item/theme-chalk/src/form-item.scss 不存在，则认为其被遗漏了，创建该文件\n+        var filePath = path.resolve(basepath, theme, 'src', fileName)\n+        if (!fileExists(filePath)) {\n+            fs.writeFileSync(filePath, '', 'utf8')\n+            console.log(theme, ' 创建遗漏的 ', fileName, ' 文件')\n+        }\n+    })\n+    fs.writeFileSync(path.resolve(basepath, theme, 'src', isSCSS ? 'index.scss' : 'index.css'), indexContent)\n+})\n"
                },
                {
                    "date": 1643342914002,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,48 +50,4 @@\n         }\n     })\n     fs.writeFileSync(path.resolve(basepath, theme, 'src', isSCSS ? 'index.scss' : 'index.css'), indexContent)\n })\n-/*\n- * @Date: 2022-01-27 17:12:59\n- * @LastEditors: zhaozc\n- * @LastEditTime: 2022-01-28 12:06:18\n- * @FilePath: \\ruipeng-ui\\build\\bin\\gen-cssfile.js\n- */\n-/**\n- * 自动在 /packages/theme-chalk/src/index.scss|css 中引入各个组件包的样式\n- * 在全量注册组件库时需要用到该样式文件，即 import 'packages/theme-chalk/src/index.scss\n- */\n-var fs = require('fs')\n-var path = require('path')\n-var Components = require('../../components.json')\n-var themes = ['theme-chalk']\n-\n-// 得到所有的包名\n-Components = Object.keys(Components)\n-\n-// 所有组件包的基础路径，/packages\n-var basepath = path.resolve(__dirname, '../../packages/')\n-\n-function fileExists(filePath) {\n-    try {\n-        return fs.statSync(filePath).isFile()\n-    } catch (err) {\n-        return false\n-    }\n-}\n-\n-themes.forEach(theme => {\n-    var isSCSS = theme !== 'theme-default'\n-    var indexContent = isSCSS ? '@import \"./base.scss\";\\n' : '@import \"./base.css\";\\n'\n-    Components.forEach(function (key) {\n-        if (['icon', 'option', 'option-group'].indexOf(key) > -1) return\n-        var fileName = key + (isSCSS ? '.scss' : '.css')\n-        indexContent += '@import \"./' + fileName + '\";\\n'\n-        var filePath = path.resolve(basepath, theme, 'src', fileName)\n-        if (!fileExists(filePath)) {\n-            fs.writeFileSync(filePath, '', 'utf8')\n-            console.log(theme, ' 创建遗漏的 ', fileName, ' 文件')\n-        }\n-    })\n-    fs.writeFileSync(path.resolve(basepath, theme, 'src', isSCSS ? 'index.scss' : 'index.css'), indexContent)\n-})\n"
                },
                {
                    "date": 1643342957609,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,6 +48,7 @@\n             fs.writeFileSync(filePath, '', 'utf8')\n             console.log(theme, ' 创建遗漏的 ', fileName, ' 文件')\n         }\n     })\n+    // 生成 /packages/theme-chalk/src/index.scss|css，负责引入所有组件包的样式\n     fs.writeFileSync(path.resolve(basepath, theme, 'src', isSCSS ? 'index.scss' : 'index.css'), indexContent)\n })\n"
                }
            ],
            "date": 1643342778479,
            "name": "Commit-0",
            "content": "/**\n * 自动在 /packages/theme-chalk/src/index.scss|css 中引入各个组件包的样式\n * 在全量注册组件库时需要用到该样式文件，即 import 'packages/theme-chalk/src/index.scss\n */\nvar fs = require('fs')\nvar path = require('path')\nvar Components = require('../../components.json')\nvar themes = ['theme-chalk']\nComponents = Object.keys(Components)\nvar basepath = path.resolve(__dirname, '../../packages/')\n\nfunction fileExists(filePath) {\n    try {\n        return fs.statSync(filePath).isFile()\n    } catch (err) {\n        return false\n    }\n}\n\nthemes.forEach(theme => {\n    var isSCSS = theme !== 'theme-default'\n    var indexContent = isSCSS ? '@import \"./base.scss\";\\n' : '@import \"./base.css\";\\n'\n    Components.forEach(function (key) {\n        if (['icon', 'option', 'option-group'].indexOf(key) > -1) return\n        var fileName = key + (isSCSS ? '.scss' : '.css')\n        indexContent += '@import \"./' + fileName + '\";\\n'\n        var filePath = path.resolve(basepath, theme, 'src', fileName)\n        if (!fileExists(filePath)) {\n            fs.writeFileSync(filePath, '', 'utf8')\n            console.log(theme, ' 创建遗漏的 ', fileName, ' 文件')\n        }\n    })\n    fs.writeFileSync(path.resolve(basepath, theme, 'src', isSCSS ? 'index.scss' : 'index.css'), indexContent)\n})\n"
        }
    ]
}