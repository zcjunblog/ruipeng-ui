{
    "sourceFile": "build/bin/iconInit.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1643352841114,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1643352841113,
            "name": "Commit-0",
            "content": "'use strict'\n/**\n * 根据 icon.scss 样式文件中的选择器，通过正则匹配的方式，匹配出所有的 icon 名称，\n * 然后将所有 icon 名组成的数组写入到 /examples/icon.json 文件中\n * 该文件在官网的 icon 图标页用来自动生成所有的 icon 图标\n */\n\nvar postcss = require('postcss')\nvar fs = require('fs')\nvar path = require('path')\n\n// icon.scss 文件内容\nvar fontFile = fs.readFileSync(path.resolve(__dirname, '../../packages/theme-chalk/src/icon.scss'), 'utf8')\n// 得到样式节点\nvar nodes = postcss.parse(fontFile).nodes\nvar classList = []\n\n// 遍历所有的样式节点\nnodes.forEach(node => {\n    var selector = node.selector || ''\n    var reg = new RegExp(/\\.el-icon-([^:]+):before/)\n    // 从选择器中匹配出 icon 名称，比如 el-icon-add，匹配得到 add\n    var arr = selector.match(reg)\n\n    // 将 icon 名称写入数组\n    if (arr && arr[1]) {\n        classList.push(arr[1])\n    }\n})\n\nclassList.reverse() // 希望按 css 文件顺序倒序排列\n\n// 将 icon 名组成的数组写入 /examples/icon.json 文件\nfs.writeFile(path.resolve(__dirname, '../../examples/icon.json'), JSON.stringify(classList), () => {})\n"
        }
    ]
}