{
    "sourceFile": "build/bin/new.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 8,
            "patches": [
                {
                    "date": 1643354587390,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1643354859884,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,13 +28,24 @@\n const path = require('path')\n const fs = require('fs')\n const fileSave = require('file-save')\n const uppercamelcase = require('uppercamelcase')\n+\n+// 组件名称，以下用 city 为例\n const componentname = process.argv[2]\n+\n+// 组件的中文名称\n const chineseName = process.argv[3] || componentname\n+\n+// 将组件名称转换为大驼峰形式，city => City\n const ComponentName = uppercamelcase(componentname)\n+\n+// 组件包目录，/packages/city\n const PackagePath = path.resolve(__dirname, '../../packages', componentname)\n+\n+// 需要添加的文件列表和文件内容的基本结构\n const Files = [\n+    // /packages/city/index.js\n     {\n         filename: 'index.js',\n         content: `import ${ComponentName} from './src/main';\n \n"
                },
                {
                    "date": 1643354887164,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,8 +46,9 @@\n const Files = [\n     // /packages/city/index.js\n     {\n         filename: 'index.js',\n+        // 文件内容，引入组件，定义组件静态方法 install 用来注册组件，然后导出组件\n         content: `import ${ComponentName} from './src/main';\n \n /* istanbul ignore next */\n ${ComponentName}.install = function(Vue) {\n"
                },
                {
                    "date": 1643354903908,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,8 +56,9 @@\n };\n \n export default ${ComponentName};`\n     },\n+    // 定义组件的基本结构，/packages/city/src/main.vue\n     {\n         filename: 'src/main.vue',\n         content: `<template>\n   <div class=\"el-${componentname}\"></div>\n"
                },
                {
                    "date": 1643354928350,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,8 +59,9 @@\n     },\n     // 定义组件的基本结构，/packages/city/src/main.vue\n     {\n         filename: 'src/main.vue',\n+        // 文件内容，sfc\n         content: `<template>\n   <div class=\"el-${componentname}\"></div>\n </template>\n \n"
                },
                {
                    "date": 1643355010617,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -70,8 +70,9 @@\n   name: 'El${ComponentName}'\n };\n </script>`\n     },\n+    // 四种语言的文档，/examples/docs/{lang}/city.md，并设置文件标题\n     {\n         filename: path.join('../../examples/docs/zh-CN', `${componentname}.md`),\n         content: `## ${ComponentName} ${chineseName}`\n     },\n"
                },
                {
                    "date": 1643355137795,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -87,10 +87,12 @@\n     {\n         filename: path.join('../../examples/docs/fr-FR', `${componentname}.md`),\n         content: `## ${ComponentName}`\n     },\n+    // 组件测试文件，/test/unit/specs/city.spec.js\n     {\n         filename: path.join('../../test/unit/specs', `${componentname}.spec.js`),\n+        // 文件内容，给出测试文件的基本结构\n         content: `import { createTest, destroyVM } from '../util';\n import ${ComponentName} from 'packages/${componentname}';\n \n describe('${ComponentName}', () => {\n@@ -105,8 +107,9 @@\n   });\n });\n `\n     },\n+    // 组件样式文件，/packages/theme-chalk/src/city.scss\n     {\n         filename: path.join('../../packages/theme-chalk/src', `${componentname}.scss`),\n         content: `@import \"mixins/mixins\";\n @import \"common/var\";\n"
                },
                {
                    "date": 1643356483453,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -110,39 +110,42 @@\n     },\n     // 组件样式文件，/packages/theme-chalk/src/city.scss\n     {\n         filename: path.join('../../packages/theme-chalk/src', `${componentname}.scss`),\n+        // 文件基本结构\n         content: `@import \"mixins/mixins\";\n @import \"common/var\";\n \n @include b(${componentname}) {\n }`\n     },\n+    // 组件类型声明文件\n     {\n         filename: path.join('../../types', `${componentname}.d.ts`),\n+        // 类型声明文件基本结构\n         content: `import { ElementUIComponent } from './component'\n \n /** ${ComponentName} Component */\n export declare class El${ComponentName} extends ElementUIComponent {\n }`\n     }\n ]\n \n-// 添加到 components.json\n+// 将组件添加到 components.json，{ City: './packages/city/index.js' }\n const componentsFile = require('../../components.json')\n if (componentsFile[componentname]) {\n     console.error(`${componentname} 已存在.`)\n     process.exit(1)\n }\n componentsFile[componentname] = `./packages/${componentname}/index.js`\n fileSave(path.join(__dirname, '../../components.json')).write(JSON.stringify(componentsFile, null, '  '), 'utf8').end('\\n')\n \n-// 添加到 index.scss\n+// 将组件样式文件在 index.scss 中引入\n const sassPath = path.join(__dirname, '../../packages/theme-chalk/src/index.scss')\n const sassImportText = `${fs.readFileSync(sassPath)}@import \"./${componentname}.scss\";`\n fileSave(sassPath).write(sassImportText, 'utf8').end('\\n')\n \n-// 添加到 element-ui.d.ts\n+// 将组件的类型声明文件在 element-ui.d.ts 中引入\n const elementTsPath = path.join(__dirname, '../../types/element-ui.d.ts')\n \n let elementTsText = `${fs.readFileSync(elementTsPath)}\n /** ${ComponentName} Component */\n@@ -154,16 +157,17 @@\n elementTsText = elementTsText.slice(0, index) + importString + '\\n' + elementTsText.slice(index)\n \n fileSave(elementTsPath).write(elementTsText, 'utf8').end('\\n')\n \n-// 创建 package\n+// 遍历 Files 数组，创建列出的所有文件并写入文件内容\n Files.forEach(file => {\n     fileSave(path.join(PackagePath, file.filename)).write(file.content, 'utf8').end('\\n')\n })\n \n-// 添加到 nav.config.json\n+// 在 nav.config.json 中添加新组件对应的路由配置\n const navConfigFile = require('../../examples/nav.config.json')\n \n+// 遍历配置中的各个语言，在所有语言配置中都增加该组件的路由配置\n Object.keys(navConfigFile).forEach(lang => {\n     let groups = navConfigFile[lang][4].groups\n     groups[groups.length - 1].list.push({\n         path: `/${componentname}`,\n"
                },
                {
                    "date": 1643448624310,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n 'use strict'\n /**\n  * 添加新组件\n- *  比如：make new city 城市列表\n+ *  比如：make new city 城市列表 （make new comp-name 中文名）\n  *  1、在 /packages 目录下新建组件目录，并完成目录结构的创建\n  *  2、创建组件文档，/examples/docs/{lang}/city.md\n  *  3、创建组件单元测试文件，/test/unit/specs/city.spec.js\n  *  4、创建组件样式文件，/packages/theme-chalk/src/city.scss\n"
                }
            ],
            "date": 1643354587390,
            "name": "Commit-0",
            "content": "'use strict'\n/**\n * 添加新组件\n *  比如：make new city 城市列表\n *  1、在 /packages 目录下新建组件目录，并完成目录结构的创建\n *  2、创建组件文档，/examples/docs/{lang}/city.md\n *  3、创建组件单元测试文件，/test/unit/specs/city.spec.js\n *  4、创建组件样式文件，/packages/theme-chalk/src/city.scss\n *  5、创建组件类型声明文件，/types/city.d.ts\n *  6、配置\n *      在 /components.json 文件中配置组件信息\n *      在 /examples/nav.config.json 中添加该组件的路由配置\n *      在 /packages/theme-chalk/src/index.scss 文件中自动引入该组件的样式文件\n *      将类型声明文件在 /types/element-ui.d.ts 中自动引入\n *  总之，该脚本的存在，让你只需专注于编写你的组件代码，其它的一概不用管\n */\n\nconsole.log()\nprocess.on('exit', () => {\n    console.log()\n})\n\nif (!process.argv[2]) {\n    console.error('[组件名]必填 - Please enter new component name')\n    process.exit(1)\n}\n\nconst path = require('path')\nconst fs = require('fs')\nconst fileSave = require('file-save')\nconst uppercamelcase = require('uppercamelcase')\nconst componentname = process.argv[2]\nconst chineseName = process.argv[3] || componentname\nconst ComponentName = uppercamelcase(componentname)\nconst PackagePath = path.resolve(__dirname, '../../packages', componentname)\nconst Files = [\n    {\n        filename: 'index.js',\n        content: `import ${ComponentName} from './src/main';\n\n/* istanbul ignore next */\n${ComponentName}.install = function(Vue) {\n  Vue.component(${ComponentName}.name, ${ComponentName});\n};\n\nexport default ${ComponentName};`\n    },\n    {\n        filename: 'src/main.vue',\n        content: `<template>\n  <div class=\"el-${componentname}\"></div>\n</template>\n\n<script>\nexport default {\n  name: 'El${ComponentName}'\n};\n</script>`\n    },\n    {\n        filename: path.join('../../examples/docs/zh-CN', `${componentname}.md`),\n        content: `## ${ComponentName} ${chineseName}`\n    },\n    {\n        filename: path.join('../../examples/docs/en-US', `${componentname}.md`),\n        content: `## ${ComponentName}`\n    },\n    {\n        filename: path.join('../../examples/docs/es', `${componentname}.md`),\n        content: `## ${ComponentName}`\n    },\n    {\n        filename: path.join('../../examples/docs/fr-FR', `${componentname}.md`),\n        content: `## ${ComponentName}`\n    },\n    {\n        filename: path.join('../../test/unit/specs', `${componentname}.spec.js`),\n        content: `import { createTest, destroyVM } from '../util';\nimport ${ComponentName} from 'packages/${componentname}';\n\ndescribe('${ComponentName}', () => {\n  let vm;\n  afterEach(() => {\n    destroyVM(vm);\n  });\n\n  it('create', () => {\n    vm = createTest(${ComponentName}, true);\n    expect(vm.$el).to.exist;\n  });\n});\n`\n    },\n    {\n        filename: path.join('../../packages/theme-chalk/src', `${componentname}.scss`),\n        content: `@import \"mixins/mixins\";\n@import \"common/var\";\n\n@include b(${componentname}) {\n}`\n    },\n    {\n        filename: path.join('../../types', `${componentname}.d.ts`),\n        content: `import { ElementUIComponent } from './component'\n\n/** ${ComponentName} Component */\nexport declare class El${ComponentName} extends ElementUIComponent {\n}`\n    }\n]\n\n// 添加到 components.json\nconst componentsFile = require('../../components.json')\nif (componentsFile[componentname]) {\n    console.error(`${componentname} 已存在.`)\n    process.exit(1)\n}\ncomponentsFile[componentname] = `./packages/${componentname}/index.js`\nfileSave(path.join(__dirname, '../../components.json')).write(JSON.stringify(componentsFile, null, '  '), 'utf8').end('\\n')\n\n// 添加到 index.scss\nconst sassPath = path.join(__dirname, '../../packages/theme-chalk/src/index.scss')\nconst sassImportText = `${fs.readFileSync(sassPath)}@import \"./${componentname}.scss\";`\nfileSave(sassPath).write(sassImportText, 'utf8').end('\\n')\n\n// 添加到 element-ui.d.ts\nconst elementTsPath = path.join(__dirname, '../../types/element-ui.d.ts')\n\nlet elementTsText = `${fs.readFileSync(elementTsPath)}\n/** ${ComponentName} Component */\nexport class ${ComponentName} extends El${ComponentName} {}`\n\nconst index = elementTsText.indexOf('export') - 1\nconst importString = `import { El${ComponentName} } from './${componentname}'`\n\nelementTsText = elementTsText.slice(0, index) + importString + '\\n' + elementTsText.slice(index)\n\nfileSave(elementTsPath).write(elementTsText, 'utf8').end('\\n')\n\n// 创建 package\nFiles.forEach(file => {\n    fileSave(path.join(PackagePath, file.filename)).write(file.content, 'utf8').end('\\n')\n})\n\n// 添加到 nav.config.json\nconst navConfigFile = require('../../examples/nav.config.json')\n\nObject.keys(navConfigFile).forEach(lang => {\n    let groups = navConfigFile[lang][4].groups\n    groups[groups.length - 1].list.push({\n        path: `/${componentname}`,\n        title: lang === 'zh-CN' && componentname !== chineseName ? `${ComponentName} ${chineseName}` : ComponentName\n    })\n})\n\nfileSave(path.join(__dirname, '../../examples/nav.config.json')).write(JSON.stringify(navConfigFile, null, '  '), 'utf8').end('\\n')\n\nconsole.log('DONE!')\n"
        }
    ]
}