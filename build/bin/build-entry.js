/**
 * 生成 /src/index.js
 *  1、自动导入组件库所有组件
 *  2、定义全量注册组件库组件的 install 方法
 *  3、导出版本、install、各个组件
 */

//  key 为包名、路径为值
var Components = require('../../components.json')
var fs = require('fs')

// 用来渲染下面的字符串模板 https://www.npmjs.com/package/json-templater
var render = require('json-templater/string')

// 负责将 comp-name 形式的字符串转换为 CompName
var uppercamelcase = require('uppercamelcase')
var path = require('path')

// 特定于操作系统的行尾标记。\n(Unix Mac Linux)  \r\n(Windows)
var endOfLine = require('os').EOL

// 输出路径 /src/index.js
var OUTPUT_PATH = path.join(__dirname, '../../src/index.js')

// 导入模版，import CompName from '../packages/comp-name/index.js'
var IMPORT_TEMPLATE = "import {{name}} from '../packages/{{package}}/index.js';"

// ' CompName'
var INSTALL_COMPONENT_TEMPLATE = '  {{name}}'

// 生成/src/index.js文件对应的模版字符串
var MAIN_TEMPLATE = `/* Automatically generated by './build/bin/build-entry.js' */

{{include}}
import locale from 'ruipeng-ui/src/locale';
import CollapseTransition from 'ruipeng-ui/src/transitions/collapse-transition';

const components = [
{{install}},
  CollapseTransition
];

const install = function(Vue, opts = {}) {
  locale.use(opts.locale);
  locale.i18n(opts.i18n);

  components.forEach(component => {
    Vue.component(component.name, component);
  });

  Vue.use(InfiniteScroll);
  Vue.use(Loading.directive);

  Vue.prototype.$RP = {
    size: opts.size || '',
    zIndex: opts.zIndex || 2000
  };

  Vue.prototype.$loading = Loading.service;
  Vue.prototype.$msgbox = MessageBox;
  Vue.prototype.$alert = MessageBox.alert;
  Vue.prototype.$confirm = MessageBox.confirm;
  Vue.prototype.$prompt = MessageBox.prompt;
  Vue.prototype.$notify = Notification;
  Vue.prototype.$message = Message;

};

/* istanbul ignore if */
if (typeof window !== 'undefined' && window.Vue) {
  install(window.Vue);
}

export default {
  version: '{{version}}',
  locale: locale.use,
  i18n: locale.i18n,
  install,
  CollapseTransition,
  Loading,
{{list}}
};
`

delete Components.font

// 得到所有的包名，[comp-name1, comp-name2]
var ComponentNames = Object.keys(Components)

// 存放所有的 import 语句
var includeComponentTemplate = []
// 组件名合集
var installTemplate = []
// 组件名合集
var listTemplate = []

// 遍历所有的包名
ComponentNames.forEach(name => {
    // 将脊柱命名法的包名转换成大驼峰命名，就是组件名，比如 form-item => FormItem
    var componentName = uppercamelcase(name)

    // 替换导入语句中的模版变量，生成导入语句，import FromItem from '../packages/form-item/index.js'
    includeComponentTemplate.push(
        render(IMPORT_TEMPLATE, {
            name: componentName,
            package: name
        })
    )

    // 这些组件不需要全局注册，采用挂载到原型链的方式，在模版字符串的 install 方法中有写
    if (['Loading', 'MessageBox', 'Notification', 'Message', 'InfiniteScroll'].indexOf(componentName) === -1) {
        installTemplate.push(
            render(INSTALL_COMPONENT_TEMPLATE, {
                name: componentName,
                component: name
            })
        )
    }
    // 将所有的组件放到 listTemplates，最后导出
    if (componentName !== 'Loading') listTemplate.push(`  ${componentName}`)
})

// 替换模版中的四个变量
var template = render(MAIN_TEMPLATE, {
    include: includeComponentTemplate.join(endOfLine),
    install: installTemplate.join(',' + endOfLine),
    version: process.env.VERSION || require('../../package.json').version,
    list: listTemplate.join(',' + endOfLine)
})

// 将就绪的模版写入到输出路径 /src/index.js
fs.writeFileSync(OUTPUT_PATH, template)
console.log('[build entry] DONE:', OUTPUT_PATH)
